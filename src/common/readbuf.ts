import { ERR_DROP, ERR_FATAL, SHORT2ANGLE } from "./shared"
import { Com_Error, Com_Printf } from "./clientserver"

export class QReadbuf {
    private data: Uint8Array
    private readcount: number

    constructor(data: Uint8Array) {
        this.data = data
        this.readcount = 0
    }

    DataAt(offset: number): string {
        return (this.data[this.readcount + offset] & 0xFF).toString(16)
    }

    Size(): number {
        return this.data.byteLength
    }

    ReadCount(): number {
        return this.readcount
    }

    BeginReading() {
        this.readcount = 0
    }
    
    ReadByte(): number {
    
        let c = -1
        if (this.readcount+1 > this.data.length) {
            c = -1
        } else {
            c = this.data[this.readcount] & 0xFF
        }
        this.readcount += 1
        return c
    }
    
    ReadChar(): number {
    
        let c = -1
        if (this.readcount+1 > this.data.length) {
            c = -1
        } else {
            c = new DataView(this.data.buffer, this.readcount).getInt8(0)
        }
        this.readcount += 1
        return c
    }

    ReadShort(): number {
    
        let c = -1
        if (this.readcount+2 > this.data.length) {
            c = -1
        } else {
            c = new DataView(this.data.buffer, this.readcount).getInt16(0, true)
        }
        this.readcount += 2
        return c
    }
    
    ReadLong(): number {
    
        let c = -1
        if (this.readcount+4 > this.data.length) {
            c = -1
        } else {
            c = new DataView(this.data.buffer, this.readcount).getInt32(0, true)
        }
        this.readcount += 4
        return c
    }

    
    ReadString(): string {
    
        let r = ""
        while (true) {
            let c = this.ReadByte()
            if ((c == -1) || (c == 0)) {
                break
            }
    
            r += String.fromCharCode(c)
        }
        return r
    }

    ReadStringLine(): string {
    
        let r = ""
        while (true) {
            let c = this.ReadByte()
            if ((c == -1) || (c == 0) || (c == ("\n").charCodeAt(0))) {
                break
            }
    
            r += String.fromCharCode(c)
        }
        return r
    }

    ReadCoord(): number {
	    return this.ReadShort() * 0.125
    }

    ReadPos(): number[] {
        return [
            this.ReadShort() * 0.125,
            this.ReadShort() * 0.125,
            this.ReadShort() * 0.125
        ]
    }

    ReadAngle(): number {
        return this.ReadChar() * 1.40625
    }

    ReadAngle16(): number {
        return SHORT2ANGLE(this.ReadShort());
    }
    
    ReadDir(): number[] {

        let b = this.ReadByte();
        if (b >= bytedirs.length) {
            Com_Error(ERR_DROP, "MSF_ReadDir: out of range");
        }

        return bytedirs[b];
    }


    ReadData(size: number): Uint8Array {
        let res = this.data.slice(this.readcount, this.readcount + size)
        this.readcount += size
        return res
    }
}

let bytedirs = [
	[-0.525731, 0.000000, 0.850651],
	[-0.442863, 0.238856, 0.864188],
	[-0.295242, 0.000000, 0.955423],
	[-0.309017, 0.500000, 0.809017],
	[-0.162460, 0.262866, 0.951056],
	[0.000000, 0.000000, 1.000000],
	[0.000000, 0.850651, 0.525731],
	[-0.147621, 0.716567, 0.681718],
	[0.147621, 0.716567, 0.681718],
	[0.000000, 0.525731, 0.850651],
	[0.309017, 0.500000, 0.809017],
	[0.525731, 0.000000, 0.850651],
	[0.295242, 0.000000, 0.955423],
	[0.442863, 0.238856, 0.864188],
	[0.162460, 0.262866, 0.951056],
	[-0.681718, 0.147621, 0.716567],
	[-0.809017, 0.309017, 0.500000],
	[-0.587785, 0.425325, 0.688191],
	[-0.850651, 0.525731, 0.000000],
	[-0.864188, 0.442863, 0.238856],
	[-0.716567, 0.681718, 0.147621],
	[-0.688191, 0.587785, 0.425325],
	[-0.500000, 0.809017, 0.309017],
	[-0.238856, 0.864188, 0.442863],
	[-0.425325, 0.688191, 0.587785],
	[-0.716567, 0.681718, -0.147621],
	[-0.500000, 0.809017, -0.309017],
	[-0.525731, 0.850651, 0.000000],
	[0.000000, 0.850651, -0.525731],
	[-0.238856, 0.864188, -0.442863],
	[0.000000, 0.955423, -0.295242],
	[-0.262866, 0.951056, -0.162460],
	[0.000000, 1.000000, 0.000000],
	[0.000000, 0.955423, 0.295242],
	[-0.262866, 0.951056, 0.162460],
	[0.238856, 0.864188, 0.442863],
	[0.262866, 0.951056, 0.162460],
	[0.500000, 0.809017, 0.309017],
	[0.238856, 0.864188, -0.442863],
	[0.262866, 0.951056, -0.162460],
	[0.500000, 0.809017, -0.309017],
	[0.850651, 0.525731, 0.000000],
	[0.716567, 0.681718, 0.147621],
	[0.716567, 0.681718, -0.147621],
	[0.525731, 0.850651, 0.000000],
	[0.425325, 0.688191, 0.587785],
	[0.864188, 0.442863, 0.238856],
	[0.688191, 0.587785, 0.425325],
	[0.809017, 0.309017, 0.500000],
	[0.681718, 0.147621, 0.716567],
	[0.587785, 0.425325, 0.688191],
	[0.955423, 0.295242, 0.000000],
	[1.000000, 0.000000, 0.000000],
	[0.951056, 0.162460, 0.262866],
	[0.850651, -0.525731, 0.000000],
	[0.955423, -0.295242, 0.000000],
	[0.864188, -0.442863, 0.238856],
	[0.951056, -0.162460, 0.262866],
	[0.809017, -0.309017, 0.500000],
	[0.681718, -0.147621, 0.716567],
	[0.850651, 0.000000, 0.525731],
	[0.864188, 0.442863, -0.238856],
	[0.809017, 0.309017, -0.500000],
	[0.951056, 0.162460, -0.262866],
	[0.525731, 0.000000, -0.850651],
	[0.681718, 0.147621, -0.716567],
	[0.681718, -0.147621, -0.716567],
	[0.850651, 0.000000, -0.525731],
	[0.809017, -0.309017, -0.500000],
	[0.864188, -0.442863, -0.238856],
	[0.951056, -0.162460, -0.262866],
	[0.147621, 0.716567, -0.681718],
	[0.309017, 0.500000, -0.809017],
	[0.425325, 0.688191, -0.587785],
	[0.442863, 0.238856, -0.864188],
	[0.587785, 0.425325, -0.688191],
	[0.688191, 0.587785, -0.425325],
	[-0.147621, 0.716567, -0.681718],
	[-0.309017, 0.500000, -0.809017],
	[0.000000, 0.525731, -0.850651],
	[-0.525731, 0.000000, -0.850651],
	[-0.442863, 0.238856, -0.864188],
	[-0.295242, 0.000000, -0.955423],
	[-0.162460, 0.262866, -0.951056],
	[0.000000, 0.000000, -1.000000],
	[0.295242, 0.000000, -0.955423],
	[0.162460, 0.262866, -0.951056],
	[-0.442863, -0.238856, -0.864188],
	[-0.309017, -0.500000, -0.809017],
	[-0.162460, -0.262866, -0.951056],
	[0.000000, -0.850651, -0.525731],
	[-0.147621, -0.716567, -0.681718],
	[0.147621, -0.716567, -0.681718],
	[0.000000, -0.525731, -0.850651],
	[0.309017, -0.500000, -0.809017],
	[0.442863, -0.238856, -0.864188],
	[0.162460, -0.262866, -0.951056],
	[0.238856, -0.864188, -0.442863],
	[0.500000, -0.809017, -0.309017],
	[0.425325, -0.688191, -0.587785],
	[0.716567, -0.681718, -0.147621],
	[0.688191, -0.587785, -0.425325],
	[0.587785, -0.425325, -0.688191],
	[0.000000, -0.955423, -0.295242],
	[0.000000, -1.000000, 0.000000],
	[0.262866, -0.951056, -0.162460],
	[0.000000, -0.850651, 0.525731],
	[0.000000, -0.955423, 0.295242],
	[0.238856, -0.864188, 0.442863],
	[0.262866, -0.951056, 0.162460],
	[0.500000, -0.809017, 0.309017],
	[0.716567, -0.681718, 0.147621],
	[0.525731, -0.850651, 0.000000],
	[-0.238856, -0.864188, -0.442863],
	[-0.500000, -0.809017, -0.309017],
	[-0.262866, -0.951056, -0.162460],
	[-0.850651, -0.525731, 0.000000],
	[-0.716567, -0.681718, -0.147621],
	[-0.716567, -0.681718, 0.147621],
	[-0.525731, -0.850651, 0.000000],
	[-0.500000, -0.809017, 0.309017],
	[-0.238856, -0.864188, 0.442863],
	[-0.262866, -0.951056, 0.162460],
	[-0.864188, -0.442863, 0.238856],
	[-0.809017, -0.309017, 0.500000],
	[-0.688191, -0.587785, 0.425325],
	[-0.681718, -0.147621, 0.716567],
	[-0.442863, -0.238856, 0.864188],
	[-0.587785, -0.425325, 0.688191],
	[-0.309017, -0.500000, 0.809017],
	[-0.147621, -0.716567, 0.681718],
	[-0.425325, -0.688191, 0.587785],
	[-0.162460, -0.262866, 0.951056],
	[0.442863, -0.238856, 0.864188],
	[0.162460, -0.262866, 0.951056],
	[0.309017, -0.500000, 0.809017],
	[0.147621, -0.716567, 0.681718],
	[0.000000, -0.525731, 0.850651],
	[0.425325, -0.688191, 0.587785],
	[0.587785, -0.425325, 0.688191],
	[0.688191, -0.587785, 0.425325],
	[-0.955423, 0.295242, 0.000000],
	[-0.951056, 0.162460, 0.262866],
	[-1.000000, 0.000000, 0.000000],
	[-0.850651, 0.000000, 0.525731],
	[-0.955423, -0.295242, 0.000000],
	[-0.951056, -0.162460, 0.262866],
	[-0.864188, 0.442863, -0.238856],
	[-0.951056, 0.162460, -0.262866],
	[-0.809017, 0.309017, -0.500000],
	[-0.864188, -0.442863, -0.238856],
	[-0.951056, -0.162460, -0.262866],
	[-0.809017, -0.309017, -0.500000],
	[-0.681718, 0.147621, -0.716567],
	[-0.681718, -0.147621, -0.716567],
	[-0.850651, 0.000000, -0.525731],
	[-0.688191, 0.587785, -0.425325],
	[-0.587785, 0.425325, -0.688191],
	[-0.425325, 0.688191, -0.587785],
	[-0.425325, -0.688191, -0.587785],
	[-0.587785, -0.425325, -0.688191],
	[-0.688191, -0.587785, -0.425325]
];